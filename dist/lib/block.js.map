{"version":3,"sources":["../../lib/block.js"],"names":["mongoose","require","module","exports","textConfig","text","String","buttons","title","block_id","type","Schema","Types","ObjectId","ref","required","gotoConfig","action","random","Boolean","items","item_type","jsonConfig","url","method","user_attributes","show_error_messages","galleryConfig","gallery_card","item_url","image_url","Object","elementConfig","subtitle","default_action","xCardSchema","builtin","default","image_aspect_ratio","elements","template_type","enum","payload","is_valid","ComponentSchema","component_type","localization","BlockSchema","bot_id","group_id","refPath","components","referral_active","timestamps","createdAt","updatedAt","collection","index","Model","model","e"],"mappings":"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","file":"block.js","sourcesContent":["'use strict'\nvar mongoose = require('mongoose')\n\nmodule.exports = function () {\n  let textConfig = {\n    text: String,\n    buttons: [\n      {\n        title: String,\n        block_id: [{type: mongoose.Schema.Types.ObjectId, ref: 'block', required: false}]\n      }]\n  }\n\n  let gotoConfig = {\n    text: String,\n    action: {\n      random: Boolean,\n      items: [\n        {\n          item_type: String,\n          block_id: [{type: mongoose.Schema.Types.ObjectId, ref: 'block', required: false}]\n\n        }\n      ]\n    }\n  }\n\n  let jsonConfig = {\n    url: String,\n    method: String,\n    user_attributes: [String],\n    show_error_messages: Boolean\n  }\n\n  let galleryConfig = new mongoose.Schema({\n    gallery_card: {\n      title: String,\n      item_url: String,\n      image_url: String,\n      buttons: [Object]\n    }\n  })\n\n  let elementConfig = new mongoose.Schema({\n    title: {type: String, required: true},\n    subtitle: String,\n    image_url: String,\n    default_action: Object,\n    buttons: [Object]\n  })\n\n  let xCardSchema = new mongoose.Schema({\n    title: {type: String, required: true},\n    builtin: {type: Boolean, required: true, default: true},\n    image_aspect_ratio: String,\n    elements: [elementConfig],\n    // name of plugin i.e. text, gallery, ai,json_plugin, go_to_plugin, etc\n    template_type: {\n      type: String,\n      required: true,\n      enum: ['image', 'video', 'audio', 'file', 'template'],\n      default: 'draft'\n    },\n    // is determined by the type which each have a unique config type: Object\n    payload: Object,\n    is_valid: Boolean\n  })\n\n  let ComponentSchema = new mongoose.Schema({\n    // \"id\": \"58927d59e4b099e9389e51f5\",\n    // \"plugin_id\": \"ai\",\n    // name of plugin i.e. text, gallery, ai,json_plugin, go_to_plugin, etc\n    component_type: {\n      type: String,\n      required: true\n    },\n    is_valid: {type: Boolean, required: true, default: true},\n    // is determined by the plugin_id which each have a unique config type: Object\n    payload: {type: Object, required: true},\n    localization: {type: Object, required: false}\n  })\n\n  let BlockSchema = new mongoose.Schema({\n    title: {type: String, required: true},\n    bot_id: {type: mongoose.Schema.Types.ObjectId, ref: 'bot', required: false},\n    group_id: {type: mongoose.Schema.Types.ObjectId, refPath: 'bots.default_group_id', required: false},\n    builtin: {type: Boolean, required: true, default: false},\n    components: [ComponentSchema],\n    referral_active: {type: Boolean, required: true, default: false},\n    is_valid: {type: Boolean, required: true, default: false}\n  }, {timestamps: {createdAt: 'created_at', updatedAt: 'updated_at'}}, {collection: 'block'})\n\n  BlockSchema.index({bot_id: 1})\n  BlockSchema.index({title: 1})\n\n  let Model\n  try {\n    // Throws an error if \"Name\" hasn't been registered\n    Model = mongoose.model('block')\n  } catch (e) {\n    Model = mongoose.model('block', BlockSchema)\n  }\n  return Model\n}\n"]}