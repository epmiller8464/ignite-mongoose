{"version":3,"sources":["../../lib/bot.js"],"names":["mongoose","require","module","exports","GroupSchema","Schema","title","type","String","blocks","Types","ObjectId","ref","required","built_in","Boolean","_id","PageInfo","id","picture","owner","bot_id","StatusSchema","read_only","default","status","enum","page","page_info","payments_status","BotSchema","date_added","Number","Date","now","timezone_offset","timezone_name","default_group_id","default_block","first_block","help_block","ai_block","description","admins","groups","has_botan_app","Model","model","e"],"mappings":"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","file":"bot.js","sourcesContent":["'use strict'\nvar mongoose = require('mongoose')\n\nmodule.exports = function () {\n\n  let GroupSchema = new mongoose.Schema({\n    title: {type: String},\n    blocks: [{type: mongoose.Schema.Types.ObjectId, ref: 'block', required: true}],\n    built_in: {type: Boolean}\n  }, {_id: false})\n\n  let PageInfo = new mongoose.Schema({\n    id: {type: String, required: true},\n    title: {type: String},\n    picture: {type: String},\n    owner: {type: mongoose.Schema.Types.ObjectId, ref: 'user', required: false},\n    bot_id: {type: String}\n  }, {_id: false, id: false})\n\n  let StatusSchema = new mongoose.Schema({\n    read_only: {type: Boolean, required: true, default: false},\n    status: {\n      type: String, required: true, enum: ['draft', 'connected', 'disabled'], default: 'draft'\n    },\n    page: {type: String},\n    page_info: {type: PageInfo},\n    payments_status: {type: String}\n  }, {_id: false, id: false})\n\n  let BotSchema = new mongoose.Schema({\n    id: {type: String},\n    title: {type: String},\n    date_added: {type: Number, default: Date.now()},\n    timezone_offset: {type: String},\n    timezone_name: {type: String},\n    default_group_id: {type: String},\n    default_block: {type: String},\n    first_block: {type: String},\n    help_block: {type: String},\n    ai_block: {type: String},\n    description: {type: String},\n    status: {type: StatusSchema},\n    admins: [{type: mongoose.Schema.Types.ObjectId, ref: 'user', required: true}],\n    groups: [GroupSchema],\n    has_botan_app: {type: Boolean, required: true, default: false}\n  })\n\n  let Model;\n  try {\n    // Throws an error if \"Name\" hasn't been registered\n    Model = mongoose.model('bot')\n  } catch (e) {\n    Model = mongoose.model('bot', BotSchema)\n  }\n  return Model\n}\n"]}