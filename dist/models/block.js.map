{"version":3,"sources":["../../models/block.js"],"names":["mongoose","require","module","exports","ComponentSchema","Schema","component_type","type","String","required","is_valid","Boolean","default","payload","Types","Object","localization","BlockSchema","title","maxLength","minLength","bot_id","ObjectId","ref","group_id","builtin","components","referral_active","history","timestamps","createdAt","updatedAt","collection","index","Model","model","e"],"mappings":"AAAA;;AACA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;AAEAC,OAAOC,OAAP,GAAiB,YAAY;;AAE3B,MAAIC,kBAAkB,IAAIJ,SAASK,MAAb,CAAoB;AACxC;AACA;AACA;AACAC,oBAAgB;AACdC,YAAMC,MADQ;AAEdC,gBAAU;AAFI,KAJwB;AAQxCC,cAAU,EAACH,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EAR8B;AASxC;AACAC,aAAS,EAACN,MAAMP,SAASK,MAAT,CAAgBS,KAAhB,CAAsBC,MAA7B,EAAqCN,UAAU,IAA/C,EAV+B;AAWxCO,kBAAc,EAACT,MAAMP,SAASK,MAAT,CAAgBS,KAAhB,CAAsBC,MAA7B,EAAqCN,UAAU,KAA/C;AAX0B,GAApB,CAAtB;AAaA;;AAEA,MAAIQ,cAAc,IAAIjB,SAASK,MAAb,CAAoB;AACpCa,WAAO,EAACX,MAAMC,MAAP,EAAeP,SAAS,IAAxB,EAA8BkB,WAAW,EAAzC,EAA6CC,WAAW,CAAxD,EAD6B;AAEpCC,YAAQ,EAACd,MAAMP,SAASK,MAAT,CAAgBS,KAAhB,CAAsBQ,QAA7B,EAAuCC,KAAK,KAA5C,EAAmDd,UAAU,IAA7D,EAF4B;AAGpCe,cAAU,EAACjB,MAAMP,SAASK,MAAT,CAAgBS,KAAhB,CAAsBQ,QAA7B,EAAuCC,KAAK,OAA5C,EAAqDd,UAAU,KAA/D,EAH0B;AAIpCgB,aAAS,EAAClB,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EAJ2B;AAKpCc,gBAAY,CAACtB,eAAD,CALwB;AAMpCuB,qBAAiB,EAACpB,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EANmB;AAOpCF,cAAU,EAACH,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EAP0B;AAQpCgB,aAAS,CAAC5B,SAASK,MAAT,CAAgBS,KAAhB,CAAsBC,MAAvB;AAR2B,GAApB,EASf,EAACc,YAAY,EAACC,WAAW,YAAZ,EAA0BC,WAAW,YAArC,EAAb,EATe,EASmD,EAACC,YAAY,OAAb,EATnD,CAAlB;;AAWAf,cAAYgB,KAAZ,CAAkB,EAACZ,QAAQ,CAAT,EAAYG,UAAU,CAAtB,EAAlB;AACAP,cAAYgB,KAAZ,CAAkB,EAACf,OAAO,CAAR,EAAlB;;AAEA,MAAIgB,cAAJ;AACA,MAAI;AACF;AACAA,YAAQlC,SAASmC,KAAT,CAAe,OAAf,CAAR;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACVF,YAAQlC,SAASmC,KAAT,CAAe,OAAf,EAAwBlB,WAAxB,CAAR;AACD;AACD,SAAOiB,KAAP;AACD,CAvCD","file":"block.js","sourcesContent":["'use strict'\nvar mongoose = require('mongoose')\n\nmodule.exports = function () {\n\n  let ComponentSchema = new mongoose.Schema({\n    // \"id\": \"58927d59e4b099e9389e51f5\",\n    // \"plugin_id\": \"ai\",\n    // name of plugin i.e. text, gallery, ai,json_plugin, go_to_plugin, etc\n    component_type: {\n      type: String,\n      required: true\n    },\n    is_valid: {type: Boolean, required: true, default: false},\n    // is determined by the plugin_id which each have a unique config type: Object\n    payload: {type: mongoose.Schema.Types.Object, required: true},\n    localization: {type: mongoose.Schema.Types.Object, required: false}\n  })\n  // type: String, trim: true, lowercase: true, required: false, minLength: 1, match: /.+\\@.+\\..+/\n\n  let BlockSchema = new mongoose.Schema({\n    title: {type: String, require: true, maxLength: 80, minLength: 1},\n    bot_id: {type: mongoose.Schema.Types.ObjectId, ref: 'bot', required: true},\n    group_id: {type: mongoose.Schema.Types.ObjectId, ref: 'group', required: false},\n    builtin: {type: Boolean, required: true, default: false},\n    components: [ComponentSchema],\n    referral_active: {type: Boolean, required: true, default: false},\n    is_valid: {type: Boolean, required: true, default: false},\n    history: [mongoose.Schema.Types.Object]\n  }, {timestamps: {createdAt: 'created_at', updatedAt: 'updated_at'}}, {collection: 'block'})\n\n  BlockSchema.index({bot_id: 1, group_id: 1})\n  BlockSchema.index({title: 1})\n\n  let Model\n  try {\n    // Throws an error if \"Name\" hasn't been registered\n    Model = mongoose.model('block')\n  } catch (e) {\n    Model = mongoose.model('block', BlockSchema)\n  }\n  return Model\n}\n"]}