{"version":3,"sources":["../../models/block.js"],"names":["mongoose","require","module","exports","ComponentSchema","Schema","component_type","type","String","required","is_valid","Boolean","default","payload","Object","localization","_id","BlockSchema","title","bot_id","Types","ObjectId","ref","group_id","builtin","components","referral_active","history","timestamps","createdAt","updatedAt","collection","index","Model","model","e"],"mappings":"AAAA;;AACA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;AAEAC,OAAOC,OAAP,GAAiB,YAAY;;AAE3B,MAAIC,kBAAkB,IAAIJ,SAASK,MAAb,CAAoB;AACxC;AACA;AACA;AACAC,oBAAgB;AACdC,YAAMC,MADQ;AAEdC,gBAAU;AAFI,KAJwB;AAQxCC,cAAU,EAACH,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EAR8B;AASxC;AACAC,aAAS,EAACN,MAAMO,MAAP,EAAeL,UAAU,IAAzB,EAV+B;AAWxCM,kBAAc,EAACR,MAAMO,MAAP,EAAeL,UAAU,KAAzB;AAX0B,GAApB,EAYnB,EAAEO,KAAK,KAAP,EAZmB,CAAtB;;AAcA,MAAIC,cAAc,IAAIjB,SAASK,MAAb,CAAoB;AACpCa,WAAO,EAACX,MAAMC,MAAP,EAAeC,UAAU,IAAzB,EAD6B;AAEpCU,YAAQ,EAACZ,MAAMP,SAASK,MAAT,CAAgBe,KAAhB,CAAsBC,QAA7B,EAAuCC,KAAK,KAA5C,EAAmDb,UAAU,IAA7D,EAF4B;AAGpCc,cAAU,EAAChB,MAAMP,SAASK,MAAT,CAAgBe,KAAhB,CAAsBC,QAA7B,EAAuCC,KAAK,OAA5C,EAAqDb,UAAU,KAA/D,EAH0B;AAIpCe,aAAS,EAACjB,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EAJ2B;AAKpCa,gBAAY,CAACrB,eAAD,CALwB;AAMpCsB,qBAAiB,EAACnB,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EANmB;AAOpCF,cAAU,EAACH,MAAMI,OAAP,EAAgBF,UAAU,IAA1B,EAAgCG,SAAS,KAAzC,EAP0B;AAQpCe,aAAS,CAAC3B,SAASK,MAAT,CAAgBe,KAAhB,CAAsBN,MAAvB;AAR2B,GAApB,EASf,EAACc,YAAY,EAACC,WAAW,YAAZ,EAA0BC,WAAW,YAArC,EAAb,EATe,EASmD,EAACC,YAAY,OAAb,EATnD,CAAlB;;AAWAd,cAAYe,KAAZ,CAAkB,EAACb,QAAQ,CAAT,EAAlB;AACAF,cAAYe,KAAZ,CAAkB,EAACd,OAAO,CAAR,EAAlB;;AAEA,MAAIe,cAAJ;AACA,MAAI;AACF;AACAA,YAAQjC,SAASkC,KAAT,CAAe,OAAf,CAAR;AACD,GAHD,CAGE,OAAOC,CAAP,EAAU;AACVF,YAAQjC,SAASkC,KAAT,CAAe,OAAf,EAAwBjB,WAAxB,CAAR;AACD;AACD,SAAOgB,KAAP;AACD,CAtCD","file":"block.js","sourcesContent":["'use strict'\nvar mongoose = require('mongoose')\n\nmodule.exports = function () {\n\n  let ComponentSchema = new mongoose.Schema({\n    // \"id\": \"58927d59e4b099e9389e51f5\",\n    // \"plugin_id\": \"ai\",\n    // name of plugin i.e. text, gallery, ai,json_plugin, go_to_plugin, etc\n    component_type: {\n      type: String,\n      required: true\n    },\n    is_valid: {type: Boolean, required: true, default: false},\n    // is determined by the plugin_id which each have a unique config type: Object\n    payload: {type: Object, required: true},\n    localization: {type: Object, required: false}\n  }, { _id: false })\n\n  let BlockSchema = new mongoose.Schema({\n    title: {type: String, required: true},\n    bot_id: {type: mongoose.Schema.Types.ObjectId, ref: 'bot', required: true},\n    group_id: {type: mongoose.Schema.Types.ObjectId, ref: 'group', required: false},\n    builtin: {type: Boolean, required: true, default: false},\n    components: [ComponentSchema],\n    referral_active: {type: Boolean, required: true, default: false},\n    is_valid: {type: Boolean, required: true, default: false},\n    history: [mongoose.Schema.Types.Object]\n  }, {timestamps: {createdAt: 'created_at', updatedAt: 'updated_at'}}, {collection: 'block'})\n\n  BlockSchema.index({bot_id: 1})\n  BlockSchema.index({title: 1})\n\n  let Model\n  try {\n    // Throws an error if \"Name\" hasn't been registered\n    Model = mongoose.model('block')\n  } catch (e) {\n    Model = mongoose.model('block', BlockSchema)\n  }\n  return Model\n}\n"]}