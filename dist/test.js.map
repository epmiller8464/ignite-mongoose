{"version":3,"sources":["../test.js"],"names":["test","require","connect","Connect","UserModel","Models","t","dbOptions","db","native_parser","server","poolSize","socketOptions","keepAlive","promiseLibrary","on","console","info","bind","error","once","seed","equal","collection","findOne","constructor","findOneAndUpdate","provider_id","id","upsert","new","err","user","fail","notEqual","toObject","remove","e","end","process","exit"],"mappings":"AAAA;;AAEA,IAAIA,OAAOC,QAAQ,MAAR,CAAX;AACA,IAAIC,UAAUD,QAAQ,SAAR,EAAmBE,OAAjC;AACA,IAAIC,YAAYH,QAAQ,SAAR,EAAmBI,MAAnB,CAA0BD,SAA1C;;AAEAJ,KAAK,2BAAL,EAAkC,UAAUM,CAAV,EAAa;AAC7C,MAAIC,YAAY;AACdC,QAAI,EAACC,eAAe,IAAhB,EADU;AAEdC,YAAQ,EAACC,UAAU,CAAX,EAAcC,eAAe,EAACC,WAAW,CAAZ,EAA7B,EAFM;AAGdC,oBAAgBb,QAAQ,UAAR;AAHF,GAAhB;;AAMA,MAAIO,KAAKN,QAAQ,8BAAR,EAAwCK,SAAxC,CAAT;AACAC,KAAGO,EAAH,CAAM,MAAN,EAAcC,QAAQC,IAAR,CAAaC,IAAb,CAAkBF,OAAlB,EAA2B,iBAA3B,CAAd;AACAR,KAAGO,EAAH,CAAM,OAAN,EAAeC,QAAQG,KAAR,CAAcD,IAAd,CAAmBF,OAAnB,EAA4B,kBAA5B,CAAf;AACAR,KAAGY,IAAH,CAAQ,MAAR,EAAgB,YAAM;AACpB,QAAIC,OAAO;AACT,qBAAe,MADN;AAET,qBAAe,cAFN;AAGT,qBAAe,WAHN;AAIT,cAAQ,WAJC;AAKT,kBAAY;AALH,KAAX;AAOAf,MAAEgB,KAAF,CAAQlB,UAAUmB,UAAV,CAAqBC,OAArB,GAA+BC,WAAvC,EAAoDxB,QAAQ,UAAR,CAApD;;AAEAG,cAAUsB,gBAAV,CAA2B,EAACC,aAAaN,KAAKO,EAAnB,EAA3B,EAAmDP,IAAnD,EAAyD,EAACQ,QAAQ,CAAT,EAAYC,KAAK,IAAjB,EAAzD,EAAiF,UAACC,GAAD,EAAMC,IAAN,EAAe;AAC9F,UAAID,OAAO,CAACC,IAAZ,EAAkB;AAChB1B,UAAE2B,IAAF,CAAO,kBAAP;AACD,OAFD,MAEO;AACL3B,UAAE4B,QAAF,CAAW,IAAX,EAAiBF,KAAKG,QAAL,EAAjB;AACAH,aAAKI,MAAL,CAAY,UAACC,CAAD,EAAO;AACjB/B,YAAEgB,KAAF,CAAQ,IAAR,EAAce,CAAd;AACA/B,YAAEgC,GAAF;AACAC,kBAAQC,IAAR;AACD,SAJD;AAKD;AACF,KAXD;AAYD,GAtBD;AAuBD,CAjCD","file":"test.js","sourcesContent":["'use strict'\n\nlet test = require('tape');\nlet connect = require('./index').Connect\nlet UserModel = require('./index').Models.UserModel\n\ntest('connection and model test', function (t) {\n  let dbOptions = {\n    db: {native_parser: true},\n    server: {poolSize: 5, socketOptions: {keepAlive: 1}},\n    promiseLibrary: require('bluebird')\n  }\n\n  let db = connect('mongodb://localhost/igniteDB', dbOptions)\n  db.on('open', console.info.bind(console, 'connection open'))\n  db.on('error', console.error.bind(console, 'connection error'))\n  db.once('open', () => {\n    var seed = {\n      \"provider_id\": \"1234\",\n      \"accessToken\": \"access_token\",\n      \"displayName\": \"Some User\",\n      \"name\": \"Some User\",\n      \"provider\": \"some entity\"\n    };\n    t.equal(UserModel.collection.findOne().constructor, require('bluebird'));\n\n    UserModel.findOneAndUpdate({provider_id: seed.id}, seed, {upsert: 1, new: true}, (err, user) => {\n      if (err || !user) {\n        t.fail('opps test failed')\n      } else {\n        t.notEqual(null, user.toObject())\n        user.remove((e) => {\n          t.equal(null, e)\n          t.end()\n          process.exit()\n        })\n      }\n    })\n  })\n});"]}